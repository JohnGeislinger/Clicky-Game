{"version":3,"sources":["components/Message/index.js","components/Header/index.js","components/ImageCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Header","href","components_Message","ImageCard","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","Wrapper","children","App","data","handleCorrectGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","components_Header","components_Wrapper","components_ImageCard","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7847b98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Message extends Component {\n    state = {\n        message: \"\",\n        animating: false\n    };\n\n    componentDidUpdate({ score, topScore }, prevState) {\n        const newState = { animating: true };\n\n        if (score === 0 && topScore === 0 ) {\n            newState.message = \"\";\n        } else if (score === 0 && topScore > 0) {\n            newState.message = \"incorrect\";\n        } else {\n            newState.message = \"correct\";\n        }\n\n        if (score !== this.props.score || this.state.message !== newState.message) {\n            this.setState(newState);\n        }\n    };\n\n    renderMessage = () => {\n        switch (this.state.message) {\n            case \"correct\":\n                return \"You gotta Llama!\";\n            case \"incorrect\":\n                return \"You gotta Drama!\";\n            default:\n                return \"Click All 12 Llamas Without Clicking the Same One Twice\";\n        }\n    };\n\n    render() {\n        return (\n            <li \n                className={this.state.animating ? this.state.message : \"\"}\n                onAnimationEnd={() => this.setState({ animating: false })}\n            >\n                {this.renderMessage()}\n            </li>\n        );\n    }\n}\n\nexport default Message;\n","import React from \"react\";\nimport Message from \"../Message\"\nimport \"./style.css\";\n\nconst Header = props => {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"itemLeft\">\n          <a href=\"/\">Llama Drama</a>\n        </li>\n        <li className=\"itemCenter\">\n        <Message score={props.score} topScore={props.topScore} />\n        </li>\n        <li className=\"itemRight\">\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst ImageCard = props => {\n  return (\n    <div \n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => {\n  return (\n    <div className=\"wrapper\">\n      {props.children}\n    </div>\n  );\n};\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport data from \"./llamas.json\";\n\nclass App extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  };\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if(newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <Wrapper>\n          {this.state.data.map(item => (\n            <ImageCard \n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleItemClick}\n              image={item.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}